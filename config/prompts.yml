# config/prompts.yml

# ------------------------------------------
# 1) Common system prompt (insert schema via {schema})
# ------------------------------------------
system: |
  You are a document-extraction agent. You must produce exactly one JSON object that
  fully conforms to the following JSON schema (no extra keys, no extra output):

  {schema}

# ------------------------------------------
# 2) Common user-prompt postfix
# ------------------------------------------
postfix: |
  Output only the JSON object; do NOT output any extra text or explanation.

# ------------------------------------------
# 3) Base templates for each extraction type (no page references)
#    Now including detailed guidance for bullet-point segmentation.
# ------------------------------------------
user:
  key_value: |
    Now: extract the field "{field_name}" (description: {description}).
    Previous value: "{prev_value}"
    {instruction}
    {postfix}

  bullet_points: |
    • A "bullet point" is a top-level list item, usually introduced by a dash (–, -, •) or numbering.
    • Extract only parent-level bullets. Do NOT treat indented or nested sub-points as separate entries:
      – If a parent bullet has nested lines (for example, "- vehicles including:" followed by sub-lines), 
        combine those sub-lines into the parent bullet’s single "value".
      – Maintain the order as it appears in the document. Assign “point_number” incrementally for each parent item.
    • Example snippet from the PDF:
        Contents we don’t insure
        We don't insure any of these items under Contents Insurance:
        loose or unset gemstones
        plants, trees or shrubs growing in the ground
        grass, rocks and soil on your site
        building materials or items at your site that are due to be fitted to your home (we provide limited cover for those items under Buildings Insurance — see page 38)
        animals
        the cost to replace any credit or financial transaction cards
        illegal items — this includes illegally downloaded digital media
        goods kept for sale, distribution, on display, exhibition or on consignment
        stock used in any business, trade or profession
        watercraft except for sailboards, canoes, kayaks, and non-motorised surf skis
        trailers, caravans, aircraft or aerial devices
        vehicles including:
        - motor vehicles
        - any registrable motorcycles
        - any motorcycles greater than 75cc
        - ride-on vehicles (for example, motorised golf buggies or carts) except for mobility scooters and ride-on lawnmowers that you only use to mow your lawn.
    • In this example:
      – The parent bullet “vehicles including:” should capture “vehicles including: motor vehicles, any registrable motorcycles, …” as one "value".
      – Do NOT output separate entries for “motor vehicles” or “any registrable motorcycles”; they are part of the parent bullet.
    • If no bullet points are found on the specified pages, return an empty list for "points".
    Now: extract all bullet points for
    {{
      field_name : {field_name},
      description: {description}
    }}
    {instruction}
    {postfix}


fallback: |
  Extract the field "{field_name}" (description: {description}) as {extraction_type}.
  Previous value: "{prev_value}"
  {instruction}
  {postfix}

# ------------------------------------------
# 4) Instruction fragments (keys must match ExtractionItem attributes)
#    Excluding bullet_points which is now embedded above.
# ------------------------------------------
instructions:
  # 4.a) When item.search_keys is provided, explain what these keys are and how to use them.
  search_keys: |
    • "search_keys" are one or more short phrases or headings you supply in your DE config.
      They help the model locate the correct section(s) or page(s) in the document by embedding similarity.
      Example: ["Contents we don’t insure", "Contents Not Insured"] will bias retrieval toward that heading.
    • If none of these exact phrases appear verbatim, the model will attempt a semantic match:
      – It looks for pages whose content is semantically similar to ANY of the search_keys.
      – If no strong match is found, it falls back to embedding the combination of field_name + description.
    • If you leave "search_keys" empty or omit it entirely, the model uses: 
    search_kyes for this extraction_item = {search_keys}

  # 4.b) When item.multipage_value == true (for key-value extraction spanning multiple pages)
  multipage_value: |
    • This field may span multiple pages.
    • At each page, if you find part of the value, set "continue_next_page": true (unless it’s the last fragment).
    • When no more fragments remain, set "continue_next_page": false.
    • If the field is not present on a given page, set "value": "" and "continue_next_page": false.
    • Each JSON fragment must follow:
      {
        "field_name": "<field_name>",
        "value": "<raw text fragment from this page>",
        "post_processing_value": "<normalized form or null>",
        "continue_next_page": <true|false>
      }

  # 4.c) When item.multiline_value == true (for key-value extraction with multiple lines on a single page)
  multiline_value: |
    • This field may contain multiple lines but will not span pages.
    • Capture the entire block of text, preserving line breaks in "value".
    • Always set "continue_next_page": false (single-page).
    • If the block is not found, set "value": "" and "continue_next_page": false.

  # 4.d) When neither multipage_value nor multiline_value is true (simple single-line key-value)
  single: |
    • This field is strictly single-page and single-line.
    • Always set "continue_next_page": false.
    • If not found on that page, set "value": "" and "continue_next_page": false.

# ------------------------------------------
# 5) Specific instructions grouped under "specific"
# ------------------------------------------
specific:
  # 5.a) Summary‐specific instructions
  summary:
    # 5.a.a) Whole‐document summarization
    whole: |
      • Summarize the entire document from start to finish, combining all relevant information.
      • If the document has multiple sections or chapters, provide a coherent overview covering the main points of each.
      • If no relevant content is found (e.g., an empty PDF), set "summary": "".

    # 5.a.b) Named‐section summarization
    section: |
      • Summarize only the named section: "{section_name}".
      • First, identify pages containing the exact heading "{section_name}". If search_keys are provided, use them to confirm the correct section.
      • Once located, extract text or images of those pages and craft a concise summary focused on that section's content.
      • If the section is not present or contains no substantive text, set "summary": "".

    # 5.a.c) Fixed‐page summarization
    pages: |
      • Summarize exactly the specified pages: {probable_pages}.
      • Concatenate the text/images from these pages in order, then produce one combined summary of that chunk.
      • If any of these pages are missing, blank, or lack extractable text, ignore them but still produce a summary of whatever remains.
      • If none of the specified pages yield content, set "summary": "".

    # 5.a.d) Previously extracted‐fields summarization
    fields: |
      • Summarize the previously extracted fields listed under "fields_to_summarize": {fields_to_summarize}.
      • Retrieve each field’s value (already extracted earlier) in the order provided, then concatenate these values.
      • Create a unified, coherent summary that covers all these field contents without repeating text verbatim.
      • If any individual field is missing or its extracted value is empty, omit it but still summarize remaining fields.
      • If none of the specified fields exist or all are empty, set "summary": "".