# config/prompts.yml

# ------------------------------------------
# 0) Instruction‐key “types” telling PromptBuilder how to interpret each key
# ------------------------------------------
instructions_detail:
  boolean:
    - multipage_value
    - multiline_value
    - single
  list:
    - search_keys
  option:
    scope:
      - whole
      - section
      - pages
      - fields
      - single_value
      - multi_value

# ------------------------------------------
# 1) Common system prompt (insert schema via {schema})
# ------------------------------------------
system: |
  You are a document-extraction agent. You must produce exactly one JSON object that
  fully conforms to the following JSON schema (no extra keys, no extra output):

  {schema}

# ------------------------------------------
# 2) Common user‐prompt postfix
# ------------------------------------------
postfix: |
  Output only the JSON object; do NOT output any extra text or explanation.

# ------------------------------------------
# 3) Base templates for each extraction type (no page references)
# ------------------------------------------
user:
  key_value: |
    Now: extract the field "{field_name}" (description: {description}).
    Previous value: "{prev_value}"
    {instruction}
    {postfix}

  bullet_points: |
    • A "bullet point" is a top-level list item, usually introduced by a dash (–, -, •) or numbering.
    • Extract only parent-level bullets. Do NOT treat indented or nested sub-points as separate entries:
      – If a parent bullet has nested lines (for example, "- vehicles including:" followed by sub-lines), 
        combine those sub-lines into the parent bullet’s single "value".
      – Maintain the order as it appears in the document. Assign “point_number” incrementally for each parent item.
    • Example snippet from the PDF:
        Contents we don’t insure
        We don't insure any of these items under Contents Insurance:
        loose or unset gemstones
        plants, trees or shrubs growing in the ground
        grass, rocks and soil on your site
        building materials or items at your site that are due to be fitted to your home (we provide limited cover for those items under Buildings Insurance — see page 38)
        animals
        the cost to replace any credit or financial transaction cards
        illegal items — this includes illegally downloaded digital media
        goods kept for sale, distribution, on display, exhibition or on consignment
        stock used in any business, trade or profession
        watercraft except for sailboards, canoes, kayaks, and non-motorised surf skis
        trailers, caravans, aircraft or aerial devices
        vehicles including:
        - motor vehicles
        - any registrable motorcycles
        - any motorcycles greater than 75cc
        - ride-on vehicles (for example, motorised golf buggies or carts) except for mobility scooters and ride-on lawnmowers that you only use to mow your lawn.
    • In this example:
      – The parent bullet “vehicles including:” should capture “vehicles including: motor vehicles, any registrable motorcycles, …” as one "value".
      – Do NOT output separate entries for “motor vehicles” or “any registrable motorcycles”; they are part of the parent bullet.
    • If no bullet points are found on the specified pages, return an empty list for "points".
    Now: extract all bullet points for
    {{
      field_name : {field_name},
      description: {description}
    }}
    {instruction}
    {postfix}

  summarization: |
    Now: summarize the requested content for field "{field_name}".
    Description: {description}
    {instruction}
    {postfix}

  checkbox: |
    Now: extract the checkbox selection(s) for "{field_name}" (description: {description}).
    {instruction}
    {postfix}

fallback: |
  Extract the field "{field_name}" (description: {description}) as {extraction_type}.
  Previous value: "{prev_value}"
  {instruction}
  {postfix}

# ------------------------------------------
# 4) Instruction fragments, organized by type
#    Every entry is now an object with "vars" and "prompt" for symmetry.
# ------------------------------------------
instructions:
  generic:
    search_keys:
      vars: ["search_keys"]
      prompt: |
        • "search_keys" are one or more short phrases or headings you supply in your DE config.
          They help the model locate the correct section(s) or page(s) in the document by embedding similarity.
          Example: ["Contents we don’t insure", "Contents Not Insured"] will bias retrieval toward that heading.
        • If none of these exact phrases appear verbatim, the model will attempt a semantic match:
          – It looks for pages whose content is semantically similar to ANY of the search_keys.
          – If no strong match is found, it falls back to embedding the combination of field_name + description.
        • If you leave "search_keys" empty or omit it entirely, then:
          search_keys for this extraction_item = {search_keys}

  key_value:
    multipage_value:
      vars: []
      prompt: |
        • This field may span multiple pages. On each page:
          – If you find (part of) the value, include it in the JSON output and set `"continue_next_page": true`.
          – If it’s the final fragment (no more pages remain), set `"continue_next_page": false`.
        • If that field is absent on a given page, set `"value": ""` and `"post_processing_value": null`, then `"continue_next_page": false`.
        • **Note:** The JSON keys follow the schema injected by the system prompt (KeyValueOutput).

    multiline_value:
      vars: []
      prompt: |
        • This field may contain multiple lines but will not span across pages.
        • Capture the entire block of text, preserving line breaks in `"value"`.
        • Always set `"continue_next_page": false` (single-page).
        • If that multi-line block is not found, set `"value": ""`, `"post_processing_value": null`, and `"continue_next_page": false`.

    single:
      vars: []
      prompt: |
        • This field is strictly single-page and single-line.
        • Always set `"continue_next_page": false`.
        • If not found on that page, set `"value": ""`, `"post_processing_value": null`, and `"continue_next_page": false`.

  bullet_points:
    multipage_value:
      vars: []
      prompt: |
        • If bullet-points span multiple pages, set `"continue_next_page": true` on intermediate pages and `"continue_next_page": false` on the last page.
        • If no bullets are found on a page, return `"points": []` and `"continue_next_page": false`.
        • **Note:** The bullets must follow the BulletPointsOutput schema injected by the system prompt.

  summary:
    whole:
      vars: []
      prompt: |
        • Summarize the entire document from start to finish, combining all relevant information.
        • If the document has multiple sections or chapters, provide a coherent overview covering the main points of each.
        • If no relevant content is found (e.g., an empty PDF), set `"summary": ""`.

    section:
      vars: ["section_name"]
      prompt: |
        • Summarize only the named section: "{section_name}".
        • Identify pages containing the exact heading "{section_name}". If search_keys are provided, use them to confirm you’re in the right section.
        • Extract text/images from those pages and craft a concise summary focused solely on that section’s content.
        • If the section is not present or contains no substantive text, set `"summary": ""`.

    pages:
      vars: ["probable_pages"]
      prompt: |
        • Summarize exactly the specified pages: {probable_pages}.
        • Concatenate text/images from these pages in order, then produce one combined summary of that chunk.
        • If any specified pages are missing or lack extractable text, ignore them and still summarize what remains.
        • If none of the specified pages yield content, set `"summary": ""`.

    fields:
      vars: ["fields_to_summarize"]
      prompt: |
        • Summarize the previously extracted fields listed under "fields_to_summarize": {fields_to_summarize}.
        • Retrieve each field’s value (already extracted earlier) in the order provided, then concatenate those values.
        • Create a unified, coherent summary that covers all these field contents without repeating text verbatim.
        • If any field is missing or its extracted value is empty, omit it but still summarize remaining fields.
        • If none of the specified fields exist or all are empty, set `"summary": ""`.

  checkbox:
    single_value:
      vars: []
      prompt: |
        • This checkbox expects exactly one selection.
        • Return a JSON object with keys matching the CheckboxOutput schema:
          – `"field_name"`: the logical field name
          – `"selected_options"`: a single-element array containing the chosen value (or `[]` if none)
          – `"continue_next_page"`: `true` or `false` depending on whether more pages remain

    multi_value:
      vars: []
      prompt: |
        • This checkbox allows multiple selections.
        • Return a JSON object with keys matching the CheckboxOutput schema:
          – `"field_name"`: the logical field name
          – `"selected_options"`: a list of chosen values (or `[]` if none)
          – `"continue_next_page"`: `true` or `false` depending on whether more pages remain